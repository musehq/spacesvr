/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { MeshBasicMaterial } from "three";
import { Text } from "@react-three/drei";
import { COLORS } from "../constants/constants";

type GLTFResult = GLTF & {
  nodes: {
    ["prema-panel"]: THREE.Mesh;
    undo: THREE.Mesh;
    redo: THREE.Mesh;
    move: THREE.Mesh;
    rotate: THREE.Mesh;
    size: THREE.Mesh;
    publish: THREE.Mesh;
    hamburger: THREE.Mesh;
    close: THREE.Mesh;
    check: THREE.Mesh;
    trash: THREE.Mesh;
    ["props-box"]: THREE.Mesh;
    ["props-click"]: THREE.Mesh;
    ["undo-click"]: THREE.Mesh;
    ["redo-click"]: THREE.Mesh;
    ["move-click"]: THREE.Mesh;
    ["rotate-click"]: THREE.Mesh;
    ["scale-click"]: THREE.Mesh;
    ["placeholder-click"]: THREE.Mesh;
    ["publish-click"]: THREE.Mesh;
    hotbar: THREE.Mesh;
  };
  materials: {
    black: THREE.MeshStandardMaterial;
    white: THREE.MeshStandardMaterial;
    green: THREE.MeshStandardMaterial;
    red: THREE.MeshStandardMaterial;
    grey: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/hotbar-1624866752/hotbar.glb.gz";

export function MoveModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const moveMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const moveMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="move-btn">
      <mesh name="move" geometry={nodes.move.geometry} material={moveMat} />
      <mesh
        name="move-click"
        geometry={nodes["move-click"].geometry}
        material={moveMatBack}
      />
      <Text
        position={[-0.75, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="move-btn-label"
      >
        Move
      </Text>
    </group>
  );
}
export function RotateModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const rotateMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const rotateMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="rotate-btn">
      <mesh
        name="rotate"
        geometry={nodes.rotate.geometry}
        material={rotateMat}
      />
      <mesh
        name="rotate-click"
        geometry={nodes["rotate-click"].geometry}
        material={rotateMatBack}
      />
      <Text
        position={[-0.05, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="rotate-btn-label"
      >
        Rotate
      </Text>
    </group>
  );
}
export function ScaleModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const scaleMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const scaleMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="scale-btn">
      <mesh name="scale" geometry={nodes.size.geometry} material={scaleMat} />
      <mesh
        name="scale-click"
        geometry={nodes["scale-click"].geometry}
        material={scaleMatBack}
      />
      <Text
        position={[0.65, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="scale-btn-label"
      >
        Scale
      </Text>
    </group>
  );
}
export function UndoModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const undoMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const undoMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="undo-btn">
      <mesh name="undo" geometry={nodes.undo.geometry} material={undoMat} />
      <mesh
        name="undo-click"
        geometry={nodes["undo-click"].geometry}
        material={undoMatBack}
      />
      <Text
        position={[-1.65, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="undo-btn-label"
      >
        Undo
      </Text>
    </group>
  );
}
export function RedoModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const redoMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const redoMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="redo">
      <mesh name="redo" geometry={nodes.redo.geometry} material={redoMat} />
      <mesh
        name="redo-click"
        geometry={nodes["redo-click"].geometry}
        material={redoMatBack}
      />
      <Text
        position={[-2.35, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="redo-btn-label"
      >
        Redo
      </Text>
    </group>
  );
}
export function HotbarModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const hotbarMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const hotbarMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        name="hotbar"
        geometry={nodes.hotbar.geometry}
        material={hotbarMat}
      />
    </group>
  );
}
export function HamburgerModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const hamburgerMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const hamburgerMatBack = new MeshBasicMaterial({
    color: COLORS.btnSecondary,
  });
  return (
    <group ref={group} {...props} dispose={null} name="hamburger">
      <mesh
        name="hamburger"
        geometry={nodes.hamburger.geometry}
        material={hamburgerMat}
      />
      <mesh
        name="hamburger-click"
        geometry={nodes["props-click"].geometry}
        material={hamburgerMatBack}
      />
      <Text
        position={[3.55, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="hamburger-btn-label"
      >
        Options
      </Text>
    </group>
  );
}
export function PublishModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const publishMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const publishMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary });
  return (
    <group ref={group} {...props} dispose={null} name="publish">
      <mesh
        name="publish"
        geometry={nodes.publish.geometry}
        material={publishMat}
      />
      <mesh
        name="publish-click"
        geometry={nodes["publish-click"].geometry}
        material={publishMatBack}
      />
      <Text
        position={[2.3, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="publish-btn-label"
      >
        Publish
      </Text>
    </group>
  );
}
export function PlaceholderModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const placeholderMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  const placeholderMatBack = new MeshBasicMaterial({
    color: COLORS.btnSecondary,
  });
  return (
    <group ref={group} {...props} dispose={null} name="placeholder">
      <mesh
        name="placeholder-click"
        geometry={nodes["placeholder-click"].geometry}
        material={placeholderMatBack}
      />
      {/*<Text position={[1.5, -0.33, 0.075]} fontSize={0.2} color={COLORS.textPrimary} textAlign="center" name="placeholder-btn-label">*/}
      {/*  Placeholder*/}
      {/*</Text>*/}
    </group>
  );
}
export function PremaModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const premaMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  return (
    <group ref={group} {...props} dispose={null} name="prema">
      <mesh
        name="prema"
        geometry={nodes["prema-panel"].geometry}
        material={premaMat}
      />
      <Text
        position={[2.3, -0.33, 0.075]}
        fontSize={0.2}
        color={COLORS.textPrimary}
        textAlign="center"
        name="prema-btn-label"
      >
        Publish
      </Text>
    </group>
  );
}
export function CloseModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const closeMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  // const closeMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary })
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh name="close" geometry={nodes.close.geometry} material={closeMat} />
    </group>
  );
}
export function TrashModel(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  const trashMat = new MeshBasicMaterial({ color: COLORS.btnPrimary });
  // const trashMatBack = new MeshBasicMaterial({ color: COLORS.btnSecondary })
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh name="trash" geometry={nodes.trash.geometry} material={trashMat} />
    </group>
  );
}

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="hotbar_00glb">
          <mesh
            name="prema-panel"
            geometry={nodes["prema-panel"].geometry}
            material={nodes["prema-panel"].material}
          />
          <mesh
            name="undo"
            geometry={nodes.undo.geometry}
            material={nodes.undo.material}
          />
          <mesh
            name="redo"
            geometry={nodes.redo.geometry}
            material={nodes.redo.material}
          />
          <mesh
            name="move"
            geometry={nodes.move.geometry}
            material={nodes.move.material}
          />
          <mesh
            name="rotate"
            geometry={nodes.rotate.geometry}
            material={nodes.rotate.material}
          />
          <mesh
            name="size"
            geometry={nodes.size.geometry}
            material={nodes.size.material}
          />
          <mesh
            name="publish"
            geometry={nodes.publish.geometry}
            material={nodes.publish.material}
          />
          <mesh
            name="hamburger"
            geometry={nodes.hamburger.geometry}
            material={nodes.hamburger.material}
          />
          <mesh
            name="close"
            geometry={nodes.close.geometry}
            material={materials.red}
          />
          <mesh
            name="check"
            geometry={nodes.check.geometry}
            material={nodes.check.material}
          />
          <mesh
            name="trash"
            geometry={nodes.trash.geometry}
            material={materials.grey}
          />
          <mesh
            name="props-box"
            geometry={nodes["props-box"].geometry}
            material={nodes["props-box"].material}
          />
          <mesh
            name="props-click"
            geometry={nodes["props-click"].geometry}
            material={nodes["props-click"].material}
          />
          <mesh
            name="undo-click"
            geometry={nodes["undo-click"].geometry}
            material={nodes["undo-click"].material}
          />
          <mesh
            name="redo-click"
            geometry={nodes["redo-click"].geometry}
            material={nodes["redo-click"].material}
          />
          <mesh
            name="move-click"
            geometry={nodes["move-click"].geometry}
            material={nodes["move-click"].material}
          />
          <mesh
            name="rotate-click"
            geometry={nodes["rotate-click"].geometry}
            material={nodes["rotate-click"].material}
          />
          <mesh
            name="scale-click"
            geometry={nodes["scale-click"].geometry}
            material={nodes["scale-click"].material}
          />
          <mesh
            name="placeholder-click"
            geometry={nodes["placeholder-click"].geometry}
            material={nodes["placeholder-click"].material}
          />
          <mesh
            name="publish-click"
            geometry={nodes["publish-click"].geometry}
            material={nodes["publish-click"].material}
          />
          <mesh
            name="hotbar"
            geometry={nodes.hotbar.geometry}
            material={nodes.hotbar.material}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
